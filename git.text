Inicio -> git init 
Mustra el estatu -> git status
Añade -> git add <file>
Añade todo los archivos -> git add .
Elimina -> git rm <file>
Elimina tambien de memoria -> git rm --cached <file>
Crear lo archivos para enpaquetar -> git commit -m "Mensaje a enviar"
Mer informacion de git -> git config --list
Historil de creasion de archivos -> git log <file>
Mustrar el historial de cambios de un archivo -> git show <file>
Mustra que se cambio entre versiones -> git diff <codigo commit> <codigo commit>
resetiar una version anterior suabe -> git reset <commit> --soft
resetiar una version anterior fuerte -> git reset <commit> --hard
Historil de git -> git log --stat
Historia de un archivo modificado editable -> git checkout <comit> <file>
Historia devolver archivo si no a echado un comi -> git checkout master <file>
crear el comid y añadiendo los al mismo tiempo -> git comit -am "descricion del commit"
crear ramas -> git branch <nombre de la rama>
para cambiar de rama -> git checkout <nombre de la rama>
para saver en que rama estoy -> git branch
para uniar dos ramas utilizo -> git merge <nombre de la rama>
agrregar un origen remoto -> git remote add origin <url> https://github.com/solcra/pythonEstudio.git
para verificar donde se esta guardando -> git remote -v
Add mas url de proyectos -> git remote add <nombre normal mente "upstream"> <url>
para actualizar la url deode se guarda -> git remote set-url <url> git@github.com:solcra/pythonEstudio.git
subir a origen remoto -> git push origin master
Realizar merge en remoto -> git pull origen <nombre de la rama>
Realizar conbinacion de historial -> git pull origin master --allow-unrelated-histories
Crear llave windows -> ssh-keygen -t rsa -b 4096 -C "youremail@example.com"
Mostrar historia -> git log --all --decorate --oneline
add tag a proyectos -> git tag -a v0.1 -m "Mensaje"
mostrar los tag -> git show-ref --tags
Subir los tag a servidor -> git push origin --tags
borrar tag -> git tag -d <nombre tag>
borrarlo de servidor -> git push origin :refs/tags/<nombre del tag>
mostrar el historil de las remas -> git show-branch
mostrar mas historial de las ramas -> git show-branch --all
clonar el proyecto desde git -> git clone url
Crear un relist para que no se vena cambios en la rama de una rama -> git rebese <primero en la rama que desaparese luego en la rama que queda>
Guardan en memoria -> git stash
Ver lo que se guardo en memoria -> git stash list
Recuperar el estado de memorio -> git stash pop
Crear una branch de loq ue esta en memoria -> git stash branch <nombre de la rama>
Eliminar de la memria -> git stash drop
quitar elementos que no quieres que esten en tu repositorio preimero tienes que listarlos -> git clean --dry-run
para eliminar los archivos -> git clian -f
pasar un comit viejo a otro -> git cherry-pick <rama y id>
remendar el comit anterior -> git commit --amend
Ver todo el historial -> git reflog
para poner el puntero en el head que deseamos -> git reset <el hact "HEAD@{1}">
para trare la informacion es con el -> git reset --HAED <id comit>
buscar en git archivos -> git grep <palabra a buscar>
buscar y poner la linea -> git grep -n <palabra>
para contar -> git grep -c <palabra>
para buscar en git BD -> git log -S "palabra"
ver cada uno de los comit que se asubido -> git shortlog
ver el numero de comis que aecho cada uno de las personas -> git shortlog -sn
Ver el nuemro de comis incluso los borrados por persona -> git shortlog -sn --all
ver el numero de commis incluso los borrados menos los merges -> git shortlog -sn -all --no-merges
crear alias en git -> git config --global alias.<nombre del alias> "<comando>"
ver quien realizo cada uno de los lineas -> git blame <nombre archivo>
ver mas organizado la identacion -> git blame -c <nombre archivo>
saver el un rango de lineas que modificaron -> git blame <nombre archivo> -L<linea>,<linea>
saver como funciona un comando de git -> git <comando> --help